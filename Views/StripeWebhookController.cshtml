using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Stripe;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace FoodDelivery.Controllers
{
    [ApiController]
    [Route("api/stripe")]
    public class StripeWebhookController : ControllerBase
    {
        private readonly IConfiguration _config;

        public StripeWebhookController(IConfiguration config)
        {
            _config = config;
        }

        [HttpPost("webhook")]
        public async Task<IActionResult>
    Webhook()
    {
    var json = await new StreamReader(HttpContext.Request.Body).ReadToEndAsync();
    var stripeSignature = Request.Headers["Stripe-Signature"].FirstOrDefault();
    var webhookSecret = _config["Stripe:WebhookSecret"];

    try
    {
    var stripeEvent = EventUtility.ConstructEvent(json, stripeSignature, webhookSecret);

    if (stripeEvent.Type == Events.CheckoutSessionCompleted)
    {
    var session = stripeEvent.Data.Object as Session;

    // Retrieve metadata (order_id) and mark order paid in your DB
    var orderId = session?.Metadata != null && session.Metadata.ContainsKey("order_id")
    ? session.Metadata["order_id"]
    : null;

    // TODO: mark order with orderId as paid in your DB and start fulfillment
    }

    return Ok();
    }
    catch (StripeException)
    {
    return BadRequest();
    }
    }
    }
    }
